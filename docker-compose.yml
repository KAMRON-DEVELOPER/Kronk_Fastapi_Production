services:
  fastapi_1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: fastapi:latest
    container_name: fastapi_1_container
    restart: on-failure
    #    command: [ "gunicorn", "app.main:app", "--worker-class", "uvicorn.workers.UvicornWorker", "--workers", "4", "--bind", "0.0.0.0:8000" ]
    command: [ "uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000" ]
    env_file:
      - ./.env
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/backend
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_container
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "-config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_container
    restart: on-failure
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    volumes:
      - ./volumes/grafana_storage:/var/lib/grafana
    depends_on:
      - prometheus

  postgres:
    image: postgres:alpine
    container_name: postgres_container
    restart: always
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis/redis-stack-server:6.2.0
    container_name: redis_container
    restart: always
    env_file:
      - ./.env
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis_storage:/data
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
        "--loadmodule",
        "/opt/redis-stack/lib/redisearch.so",
        "--loadmodule",
        "/opt/redis-stack/lib/rejson.so",
      ]
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio_container
    restart: always
    env_file:
      - ./.env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./volumes/minio_storage:/data
    command: minio server /data

  nginx:
    image: nginx:bookworm
    container_name: nginx_container
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      fastapi_1:
        condition: service_healthy

volumes:
  postgres_storage:
    name: postgres_storage_volume
  redis_storage:
    name: redis_storage_volume
  minio_storage:
    name: minio_storage_volume
  grafana_storage:
    name: grafana_storage_volume
